{
    "componentChunkName": "component---src-templates-cheatsheets-detail-index-tsx",
    "path": "/cheatsheet/flat-dictionary",
    "result": {"pageContext":{"slug":"flat-dictionary","data":{"frontmatter":{"title":"Flat Dictionary","publishedOn":"2021-06-13","abstract":"Mengubah kumpulan key-value (Nested Object) pada dictionary ke dictionary yang hanya memiliki key-value.","isPublished":true},"fields":{"slug":"flat-dictionary"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Flat Dictionary\",\n  \"abstract\": \"Mengubah kumpulan key-value (Nested Object) pada dictionary ke dictionary yang hanya memiliki key-value.\",\n  \"isPublished\": true,\n  \"featured\": false,\n  \"publishedOn\": \"2021-06-13\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Algoritma yang digunakan untuk mengubah kumpulan dictionary menjadi flat.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const dict = {\\n  key1: 2,\\n  key2: 23,\\n  nested: {\\n    a: 34,\\n    b: 24,\\n    nested: {\\n      c: 'qwerty',\\n      d: 'asdf'\\n    }\\n  }\\n}\\n\\nfunction flatDict(dictionary) {\\n  let initDict = {}\\n\\n  function dictHelper(dict, propName) {\\n    if (typeof dict !== 'object') {\\n      initDict[propName] = dict\\n      return\\n    }\\n    for (const prop in dict) {\\n      // if (propName == '') {\\n        dictHelper(dict[prop], prop)\\n      // } else {\\n      //   dictHelper(dict[prop], propName+'.'+prop)\\n      // }\\n    }\\n  }\\n\\n  dictHelper(dictionary, '')\\n  return initDict\\n}\\n\\nflatDict(dict) // { key1: 2, key2: 23, a: 34, b: 24, c: 'qwerty', d: 'asdf' }\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"TIme Complexity: : O(log2(n)) atau logartichmic\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"flat-dictionary","excerpt":"Algoritma yang digunakan untuk mengubah kumpulan dictionary menjadi flat. TIme Complexity: : O(log2(n)) atau logartichmic"}}},
    "staticQueryHashes": ["45326706","558488063"]}