{"version":3,"sources":["webpack://muhrusdi.github.io/./src/components/blog/blog-item/index.tsx","webpack://muhrusdi.github.io/./src/components/blog/lastest/index.tsx","webpack://muhrusdi.github.io/./src/pages/blog/index.tsx"],"names":["data","G","width","style","height","className","image","getImage","frontmatter","featuredImage","alt","src","title","abstract","Link","to","fields","slug","size","formatDate","publishedOn","Latest","badge","seoTitle","defaultProps","useStaticQuery","featured","edges","node","allMdx","map","key","isPublished"],"mappings":"4LAsCA,IA/B2B,SAAC,GAAY,IAAXA,EAAU,EAAVA,KAC3B,OACE,2BACE,2BACE,2BACE,gBAAC,EAAAC,EAAD,CAAaC,MAAO,IAAKC,MAAO,CAACC,OAAQ,KAAMC,UAAU,oBAAoBC,OAAOC,OAASP,EAAKQ,YAAYC,eAAgBC,IAAI,KAE/HV,EAAKQ,YAAYC,cAEd,KADF,uBAAKN,MAAO,CAACC,OAAQ,KAAMC,UAAU,iCAAiCM,IAAI,+EAA+ED,IAAI,OAKrK,2BACE,2BACE,sBAAIL,UAAU,uCAAuCL,EAAKQ,YAAYI,OACtE,qBAAGP,UAAU,mCAAmCL,EAAKQ,YAAYK,UACjE,gBAAC,KAAD,CAAgBR,UAAU,8CACxB,gBAAC,EAAAS,KAAD,CAAMC,GAAE,SAAWf,EAAKgB,OAAOC,KAAQZ,UAAU,+BAC/C,uBAAKA,UAAU,qBACb,yCADF,IACyB,gBAAC,MAAD,CAAgBa,KAAM,OAGjD,wBAAMb,UAAU,iCAAgCc,OAAWnB,EAAKQ,YAAYY,oB,8ECzBlFC,EAAmB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOtB,EAAU,EAAVA,KAChC,OACE,uBAAKK,UAAU,8BACb,uBAAKA,UAAU,wBACb,2BACE,wBAAMA,UAAU,qEAAqEiB,GACrF,sBAAIjB,UAAU,mEAAmEL,aAAjF,EAAiFA,EAAMQ,YAAYe,UACnG,qBAAGlB,UAAU,2CAA2CL,aAAxD,EAAwDA,EAAMQ,YAAYK,UAC1E,gBAAC,EAAAC,KAAD,CAAMC,GAAE,UAAWf,aAAX,EAAWA,EAAMgB,OAAOC,MAAQZ,UAAU,8BAChD,uBAAKA,UAAU,qBACb,yCADF,IACyB,gBAAC,MAAD,CAAgBa,KAAM,SAKrD,uBAAKb,UAAU,wCACb,2BACE,gBAAC,EAAAJ,EAAD,CAAaC,MAAO,IAAKC,MAAO,CAACC,OAAQ,KAAMC,UAAU,oBAAoBC,OAAOC,OAASP,aAAD,EAACA,EAAMQ,YAAYC,eAAgBC,IAAI,SAO7I,MAEAW,EAAOG,aAAe,CACpBF,MAAO,yB,+FCyDT,UAnFwB,WACtB,IAAMtB,GAAOyB,oBAAe,cAiDrBC,EAAY1B,EAAK0B,SAASC,MAAjC,GACA,OACE,gCACE,gBAAC,IAAD,KACE,2BACE,uBAAKtB,UAAU,QACb,gBAAC,IAAD,CAAYiB,MAAM,WAAWtB,KAAM0B,aAAF,EAAEA,EAAUE,QAE/C,uBAAKvB,UAAU,SACb,sBAAIA,UAAU,yCAEVL,aAFJ,EAEIA,EAAM6B,OAAOF,MAAMG,KAAI,WAASC,GAAS,IAAhBH,EAAe,EAAfA,KACvB,OAKEA,EAAKpB,YAAYwB,YACf,sBAAID,IAAKA,GACP,gBAAC,IAAD,CAAU/B,KAAM4B,KAEhB","file":"component---src-pages-blog-index-tsx-e35c2469114959b23f0a.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\"\nimport { BiChevronRight } from \"react-icons/bi\"\nimport { BlogItemFooter } from \"components/utils\"\nimport { formatDate } from \"utils\"\n\nconst BlogItem: React.FC = ({data}) => {\n  return (\n    <div>\n      <div>\n        <div>\n          <GatsbyImage width={100} style={{height: 200}} className=\"rounded-lg w-full\" image={getImage(data.frontmatter.featuredImage)} alt=\"\"/>\n          {\n            !data.frontmatter.featuredImage ? (\n              <img style={{height: 200}} className=\"rounded-lg object-cover w-full\" src=\"https://res.cloudinary.com/muhrusdi/image/upload/v1623214698/placeholder.jpg\" alt=\"\"/>\n            ) : null\n          }\n        </div>\n      </div>\n      <div>\n        <div>\n          <h2 className=\"text-xl mt-6 font-bold line-clamp-2\">{data.frontmatter.title}</h2>\n          <p className=\"mt-4 text-gray-400 line-clamp-2\">{data.frontmatter.abstract}</p>\n          <BlogItemFooter className=\"flex flex-row-reverse justify-between mt-4\">\n            <Link to={`/blog/${data.fields.slug}`} className=\"inline-block transition-all\">\n              <div className=\"flex items-center\">\n                <span>Read more</span> <BiChevronRight size={24}/>\n              </div>\n            </Link>\n            <span className=\"text-gray-400 transition-all\">{formatDate(data.frontmatter.publishedOn)}</span>\n          </BlogItemFooter>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default BlogItem","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\"\nimport { BiChevronRight } from \"react-icons/bi\"\n\nconst Latest: React.FC = ({badge, data}) => {\n  return (\n    <div className=\"md:flex -mx-4 items-center\">\n      <div className=\"w-full md:w-1/2 px-4\">\n        <div>\n          <span className=\"inline-block rounded-full text-xs uppercase py-1 px-4 bg-gray-600\">{badge}</span>\n          <h2 className=\"text-4xl sm:text-5xl sm:leading-12 mt-6 font-black line-clamp-3\">{data?.frontmatter.seoTitle}</h2>\n          <p className=\"mt-8 text-lg text-gray-400 line-clamp-2\">{data?.frontmatter.abstract}</p>\n          <Link to={`/blog/${data?.fields.slug}`} className=\"mt-10 inline-block text-lg\">\n            <div className=\"flex items-center\">\n              <span>Read more</span> <BiChevronRight size={24}/>\n            </div>\n          </Link>\n        </div>\n      </div>\n      <div className=\"w-full sm:w-1/2 px-4 hidden md:block\">\n        <div>\n          <GatsbyImage width={100} style={{height: 300}} className=\"rounded-lg w-full\" image={getImage(data?.frontmatter.featuredImage)} alt=\"\"/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Latest\n\nLatest.defaultProps = {\n  badge: \"Latest from the blog\"\n}","import React from \"react\"\nimport Layout from \"containers/layout\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport BlogItem from \"components/blog/blog-item\"\nimport LatestBlog from \"components/blog/lastest\"\n\nconst Blogs: React.FC = () => {\n  const data = useStaticQuery(graphql`\n    fragment Blog on Mdx {\n      frontmatter {\n        title\n        publishedOn\n        seoTitle\n        abstract\n        isPublished\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED)\n          }\n        }\n      }\n      fields {\n        slug\n      }\n      body\n      slug\n      excerpt\n      internal {\n        type\n      }\n    }\n\n    query {\n      featured: allMdx(\n        limit: 1\n        sort: {fields: frontmatter___publishedOn, order: DESC}\n        filter: {frontmatter: {isPublished: {eq: true}, featured: {eq: true}}}\n      ) {\n        edges {\n          node {\n            ...Blog\n          }\n        }\n      }\n      allMdx(\n        sort: {fields: frontmatter___publishedOn, order: DESC}\n      ) {\n        edges {\n          node {\n            ...Blog\n          }\n        }\n      }\n    }\n  `)\n\n  const [featured] = data.featured.edges\n  return (\n    <>\n      <Layout>\n        <div>\n          <div className=\"py-8\">\n            <LatestBlog badge=\"Featured\" data={featured?.node}/>\n          </div>\n          <div className=\"mt-20\">\n            <ul className=\"grid grid-cols-1 sm:grid-cols-3 gap-8\">\n              {\n                data?.allMdx.edges.map(({node}, key) => {\n                  return process.env.NODE_ENV !== \"production\" ? (\n                    <li key={key}>\n                      <BlogItem data={node}/>\n                    </li>\n                  ) : (\n                    node.frontmatter.isPublished ? (\n                      <li key={key}>\n                        <BlogItem data={node}/>\n                      </li>\n                    ) : null\n                  )\n                })\n              }\n            </ul>\n          </div>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\nexport default Blogs"],"sourceRoot":""}