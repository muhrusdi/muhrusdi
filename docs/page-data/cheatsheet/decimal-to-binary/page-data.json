{
    "componentChunkName": "component---src-templates-cheatsheets-detail-index-tsx",
    "path": "/cheatsheet/decimal-to-binary",
    "result": {"pageContext":{"slug":"decimal-to-binary","data":{"frontmatter":{"title":"Decimal to Binary","publishedOn":"2021-06-13","abstract":"Decimal ke binary menggunakan metode rekursif.","isPublished":true},"fields":{"slug":"decimal-to-binary"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Decimal to Binary\",\n  \"abstract\": \"Decimal ke binary menggunakan metode rekursif.\",\n  \"isPublished\": true,\n  \"featured\": false,\n  \"publishedOn\": \"2021-06-13\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Kita akan membuat program yang akan mengubah bilangan desimal menjadi bilangan biner\\ndengan menggunakan recursive.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const base10ToString = (n) => {\\n  let binaryString = ''\\n  function base10ToStringHelper(n) {\\n    if (n < 2) {\\n      binaryString += n\\n      return\\n    } else {\\n      base10ToStringHelper(Math.floor(n / 2))\\n      base10ToStringHelper(n % 2)\\n    }\\n  }\\n  base10ToStringHelper(n)\\n  return binaryString\\n}\\n\\nbase10ToString(1234) // 10011010010\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"TIme Complexity: : O(log2(n)) atau logartichmic\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"decima-to-binary","excerpt":"Kita akan membuat program yang akan mengubah bilangan desimal menjadi bilangan biner \ndengan menggunakan recursive. TIme Complexity: : O(logâ€¦"}}},
    "staticQueryHashes": ["45326706","558488063"]}